---
title: "Colour"
author: "Andrew Irwin, a.irwin@dal.ca"
date: "2024-03-26"
format:
  revealjs:
    slide-number: true
    theme:  default
    chalkboard: true
    auto-animate: true
    scrollable: true
    code-block-border-left: true
    code-copy: false
    code-link: true
    history: false
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(forcats)
library(lubridate)
library(palmerpenguins)
library(kableExtra)
library(paletteer)
library(gapminder)
my_theme = theme_bw() + theme(text = element_text(size=25))
knitr::opts_chunk$set(
  fig.width = 6, fig.asp = 0.65, fig.align="center", out.width = '70%', dev='svglite'
)
```

## Plan

* Scientific background

* Discrete colour scales

* Continuous colour scales

* viridis colour

* other palettes

* custom colours

## Spectrum { background-image="static/L31/rainbow.jpg" }

## Spectrum


![Spectrum](static/L31/spectrum-continuous.jpeg)
![Spectrum wavelengths](static/L31/wavelengths-rainbow.png)

## Colours we draw with

![Crayola colors](static/L31/crayola.jpeg)

## Colors that exist in nature

![Pigments in nature](static/L31/photosynthetic-pigment-abs-spectrum.jpeg){#fig-nature-colour}

## What your eye sees

![Response of cones in your eyes](static/L31/cones-response-curves.svg){#fig-cones}


## What a computer screen creates

![LED emission spectrum](static/L31/RGB_LED_Spectrum.svg){#fig-LED}


## Colors on a computer screen

![CIE model](static/L31/CIExy1931_sRGB_gamut_D65-wikimedia.png){#fig-create-on-computer}

## Photo of screen

![Photo of LCD screen with cell phone](static/L31/computer-screen-cell-phone-photo.png)

## Pixel geometry

![Wikipedia page for Pixel](static/L31/Pixel_geometry_01_Pengo.jpeg)

## Two models for creating colour 

![Creating colour models](static/L31/rgb-cmyk.webp){#fig-create-colour}


## Additive model

![Additive](static/L31/wheel-additive-basic.svg){#fig-adding-colour}

## Subtractive model

![Subtractive](static/L31/wheel-subtractive-basic.svg){#fig-subtract-colour}

## Colour guidelines - Discrete

* Not too many

* Keep brightness constant

## Colour guidelines - Continuous

* One shade, vary brightness

* Two shades if there is a natural middle or 0, white in middle

* Avoid red-green diverging scales


## Discrete colour scales

```{r warning=FALSE, fig.asp = 0.7, out.width="60%", fig.align="center"}
penguins |> ggplot(aes(body_mass_g, flipper_length_mm,
                        color = species)) + geom_point() + my_theme
```

## Discrete colour scales

```{r warning=FALSE, fig.asp = 0.7, out.width="60%", fig.align="center"}
penguins |> ggplot(aes(body_mass_g, flipper_length_mm,
                        color = species)) + geom_point() + my_theme +
  scale_color_viridis_d(end = 0.7) 
```


## Discrete colour scales

```{r warning=FALSE, fig.asp = 0.7, out.width="60%", fig.align="center"}
penguins |> ggplot(aes(body_mass_g, flipper_length_mm,
                        color = species)) + geom_point() + my_theme +
  scale_color_paletteer_d("ggthemes::hc_default")
```


## Discrete colour scales

```{r warning=FALSE, fig.asp = 0.7, out.width="60%", fig.align="center"}
penguins |> ggplot(aes(body_mass_g, flipper_length_mm,
                        color = species)) + geom_point() + my_theme +
  scale_color_manual(values = c("red", "blue", "orange"))
```

## Continuous colour shades

```{r warning=FALSE, fig.asp = 0.7, out.width="60%", fig.align="center"}
gapminder |> filter(country %in% c("Canada", "China", "Chile", "Iceland")) |>
  ggplot(aes(year, lifeExp, color = log10(pop))) +
  geom_point(size=3) + my_theme
```


## Continuous colour shades - diverging

```{r warning=FALSE}
p1 <- penguins |> mutate(body_mass_centered = 
                      body_mass_g - mean(body_mass_g, na.rm=TRUE)) |>
  ggplot(aes(flipper_length_mm, bill_length_mm, 
             color = body_mass_centered)) +
  geom_point(size=3) + theme_bw() +
  # scale_color_distiller(type="div", palette="RdBu", limits = c(-2000,2000)) 
  scale_color_fermenter(type="div", 
                        palette="RdBu", 
                        limits = c(-2000,2000)) 
```

## Continuous colour shades - diverging

```{r echo=FALSE, warning=FALSE, fig.asp = 0.7, out.width="80%", fig.align="center"}
p1 + my_theme +
  labs(color = "Mass relative\nto mean (g)")
```

## Make your own palette { background-image="static/L31/beach.jpg" }

## coolors.co palette maker { background-image="static/L31/palette.png" }


## Further reading {.smaller}

* Course notes

* Healy and Wilke sections on colour

* Blog posting on colour scales in data visualization
  * https://blog.datawrapper.de/which-color-scale-to-use-in-data-vis/
  
* Collection of palettes: 
  * https://r-graph-gallery.com/38-rcolorbrewers-palettes.html
  * https://github.com/EmilHvitfeldt/paletteer
  * https://github.com/EmilHvitfeldt/r-color-palettes
  

