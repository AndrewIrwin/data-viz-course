---
title: "Collaboration with GitHub"
author: "Andrew Irwin, a.irwin@dal.ca"
date: "2024-02-27"
format:
  revealjs:
    slide-number: true
    theme:  default
    chalkboard: true
    auto-animate: true
    scrollable: true
    code-block-border-left: true
    code-copy: false
    code-link: true
    history: false
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
my_theme = theme_classic() + 
  theme(text = element_text(size=18))
```

## Plan

* Collaborating with GitHub and Rstudio

* How editing conflicts arise

* Resolving editing conflicts

* Other workflows

## Using a shared repository

```{r echo=FALSE, fig.align="center", out.width='90%'}
knitr::include_graphics("static/L18/collaboration-01.png")
```

## Scenario

* Two people have cloned the repository to their computer and are both editing the same file

:::: {.columns}
::: {.column width="50%"}
```{r echo=FALSE, fig.align="center", out.width='90%'}
knitr::include_graphics("static/L18/collaboration-02-rstudio-cloud-student.png")
```
:::
::: {.column width="50%"}
```{r echo=FALSE, fig.align="center", out.width='90%'}
knitr::include_graphics("static/L18/collaboration-02-airwin.png")
```
:::
::::


## One person pushes a change to GitHub

* What happens when the second person tries to push a change?

```{r echo=FALSE, fig.align="center", out.width='90%'}
knitr::include_graphics("static/L18/collaboration-03-conflict.png")
```

## One person pushes a change to GitHub

* What happens when the second person tries to push a change?

```{r echo=FALSE, fig.align="center", out.width='90%'}
knitr::include_graphics("static/L18/collaboration-03-resolution.png")
```

## Later, the other user pulls the changes

```{r echo=FALSE, fig.align="center", out.width='90%'}
knitr::include_graphics("static/L18/collaboration-04-result.png")
```

## Conflicting edits on the same line can't be resolved automatically

:::: {.columns}
::: {.column width="50%"}
```{r echo=FALSE, fig.align="center", out.width='100%'}
knitr::include_graphics("static/L18/collaboration-05-conflict-1.png")
```
:::
::: {.column width="50%"}
```{r echo=FALSE, fig.align="center", out.width='100%'}
knitr::include_graphics("static/L18/collaboration-05-conflict-A.png")
```
:::
::::


## Conflicting edits on the same line can't be resolved automatically

```{r echo=FALSE, fig.align="center", out.width='90%'}
knitr::include_graphics("static/L18/collaboration-06-message.png")
```

## Pull, edit, stage, commit, push

```{r echo=FALSE, fig.align="center", out.width='90%'}
knitr::include_graphics("static/L18/collaboration-07-resolution.png")
```

## Summary

* The pull - edit - commit - push editing workflow

* Non-conflicting "simultaneous" edits

* Conflicting simultaneous edits on the same line and how to resolve them
  * Commit to local repository
  * Pull remote changes
  * Resolve conflicts
  * Stage, commit, and push changes

* When you start to work on a project, begin by "pull"ing any changes made by someone else

## Further reading

* Course notes

* [Collaboration tutorial](https://uoftcoders.github.io/studyGroup/lessons/git/collaboration/lesson/) linked in course notes

* [Resolving merge conflicts on GitHub](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/resolving-a-merge-conflict-using-the-command-line)


## Task

* Work with your team on the project repository. Each team member should edit the proposal file.
  * Clone your project repository to your computer.
  * Edit your project proposal. 
  * Stage, commit, and push your changes.
  * Resolve any conflicts that arise -- for example, two people editing the same line of a markdown document.

